var parser = (function(){
  /* Generated by PEG.js 0.6.1 (http://pegjs.majda.cz/). */

/*
  
GRAMMAR
  
start
 = implication
 / "(" f1:start ")" {return f1}

implication
 = f1:disjunction "->" f2:start {return fml_imp(f1,f2)}
 / "(" f1:start ")" "->" f2:start {return fml_imp(f1,f2)}
 / disjunction

disjunction
 = f1:conjunction "v" f2:disjunction {return fml_dis(f1,f2)}
 /  f1:conjunction "v" "(" f2:start ")" {return fml_dis(f1,f2)}
 / "(" f1:start ")" "v" f2:disjunction  {return fml_dis(f1,f2)}
 / "(" f1:start ")" "v" "(" f2:start ")" {return fml_dis(f1,f2)}
 / conjunction

conjunction
 = f1:negation "&" f2:conjunction {return fml_con(f1,f2)}
 / f1:negation "&" "(" f2:start ")"  {return fml_con(f1,f2)}
 / "(" f1:start ")" "&" f2:conjunction  {return fml_con(f1,f2)}
 / "(" f1:start ")" "&" "(" f2:start ")" {return fml_con(f1,f2)}
 / negation

negation
 = "-" f1:negation {return fml_neg(f1)}
 / "-" f1:atom {return fml_neg(f1)}
 / "-" "(" f1:start ")" {return fml_neg(f1)}
 / atom

atom
 = at:[a-uw-z0-9]+ {return fml_at(at.join(""))}
 / "(" at:atom+ ")" {return at}
 
      
 */
    
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "atom": parse_atom,
        "conjunction": parse_conjunction,
        "disjunction": parse_disjunction,
        "implication": parse_implication,
        "negation": parse_negation,
        "start": parse_start
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result6 = parse_implication();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "(") {
            var result3 = "(";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result3 !== null) {
            var result4 = parse_start();
            if (result4 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result5 = ")";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(f1) {return f1})(result2[1])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_implication() {
        var cacheKey = 'implication@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result11 = parse_disjunction();
        if (result11 !== null) {
          if (input.substr(pos, 2) === "->") {
            var result12 = "->";
            pos += 2;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"->\"");
            }
          }
          if (result12 !== null) {
            var result13 = parse_start();
            if (result13 !== null) {
              var result10 = [result11, result12, result13];
            } else {
              var result10 = null;
              pos = savedPos1;
            }
          } else {
            var result10 = null;
            pos = savedPos1;
          }
        } else {
          var result10 = null;
          pos = savedPos1;
        }
        var result9 = result10 !== null
          ? (function(f1, f2) {return fml_imp(f1,f2)})(result10[0], result10[2])
          : null;
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "(") {
            var result4 = "(";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_start();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result6 = ")";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result6 !== null) {
                if (input.substr(pos, 2) === "->") {
                  var result7 = "->";
                  pos += 2;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"->\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse_start();
                  if (result8 !== null) {
                    var result3 = [result4, result5, result6, result7, result8];
                  } else {
                    var result3 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
          var result2 = result3 !== null
            ? (function(f1, f2) {return fml_imp(f1,f2)})(result3[1], result3[4])
            : null;
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_disjunction();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_disjunction() {
        var cacheKey = 'disjunction@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        var result27 = parse_conjunction();
        if (result27 !== null) {
          if (input.substr(pos, 1) === "v") {
            var result28 = "v";
            pos += 1;
          } else {
            var result28 = null;
            if (reportMatchFailures) {
              matchFailed("\"v\"");
            }
          }
          if (result28 !== null) {
            var result29 = parse_disjunction();
            if (result29 !== null) {
              var result26 = [result27, result28, result29];
            } else {
              var result26 = null;
              pos = savedPos3;
            }
          } else {
            var result26 = null;
            pos = savedPos3;
          }
        } else {
          var result26 = null;
          pos = savedPos3;
        }
        var result25 = result26 !== null
          ? (function(f1, f2) {return fml_dis(f1,f2)})(result26[0], result26[2])
          : null;
        if (result25 !== null) {
          var result0 = result25;
        } else {
          var savedPos2 = pos;
          var result20 = parse_conjunction();
          if (result20 !== null) {
            if (input.substr(pos, 1) === "v") {
              var result21 = "v";
              pos += 1;
            } else {
              var result21 = null;
              if (reportMatchFailures) {
                matchFailed("\"v\"");
              }
            }
            if (result21 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result22 = "(";
                pos += 1;
              } else {
                var result22 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result22 !== null) {
                var result23 = parse_start();
                if (result23 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result24 = ")";
                    pos += 1;
                  } else {
                    var result24 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result24 !== null) {
                    var result19 = [result20, result21, result22, result23, result24];
                  } else {
                    var result19 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result19 = null;
                  pos = savedPos2;
                }
              } else {
                var result19 = null;
                pos = savedPos2;
              }
            } else {
              var result19 = null;
              pos = savedPos2;
            }
          } else {
            var result19 = null;
            pos = savedPos2;
          }
          var result18 = result19 !== null
            ? (function(f1, f2) {return fml_dis(f1,f2)})(result19[0], result19[3])
            : null;
          if (result18 !== null) {
            var result0 = result18;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "(") {
              var result13 = "(";
              pos += 1;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result13 !== null) {
              var result14 = parse_start();
              if (result14 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result15 = ")";
                  pos += 1;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result15 !== null) {
                  if (input.substr(pos, 1) === "v") {
                    var result16 = "v";
                    pos += 1;
                  } else {
                    var result16 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"v\"");
                    }
                  }
                  if (result16 !== null) {
                    var result17 = parse_disjunction();
                    if (result17 !== null) {
                      var result12 = [result13, result14, result15, result16, result17];
                    } else {
                      var result12 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result12 = null;
                  pos = savedPos1;
                }
              } else {
                var result12 = null;
                pos = savedPos1;
              }
            } else {
              var result12 = null;
              pos = savedPos1;
            }
            var result11 = result12 !== null
              ? (function(f1, f2) {return fml_dis(f1,f2)})(result12[1], result12[4])
              : null;
            if (result11 !== null) {
              var result0 = result11;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 1) === "(") {
                var result4 = "(";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result4 !== null) {
                var result5 = parse_start();
                if (result5 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result6 = ")";
                    pos += 1;
                  } else {
                    var result6 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result6 !== null) {
                    if (input.substr(pos, 1) === "v") {
                      var result7 = "v";
                      pos += 1;
                    } else {
                      var result7 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"v\"");
                      }
                    }
                    if (result7 !== null) {
                      if (input.substr(pos, 1) === "(") {
                        var result8 = "(";
                        pos += 1;
                      } else {
                        var result8 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (result8 !== null) {
                        var result9 = parse_start();
                        if (result9 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result10 = ")";
                            pos += 1;
                          } else {
                            var result10 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result10 !== null) {
                            var result3 = [result4, result5, result6, result7, result8, result9, result10];
                          } else {
                            var result3 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result3 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result3 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result3 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result3 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
              var result2 = result3 !== null
                ? (function(f1, f2) {return fml_dis(f1,f2)})(result3[1], result3[5])
                : null;
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_conjunction();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_conjunction() {
        var cacheKey = 'conjunction@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        var result27 = parse_negation();
        if (result27 !== null) {
          if (input.substr(pos, 1) === "&") {
            var result28 = "&";
            pos += 1;
          } else {
            var result28 = null;
            if (reportMatchFailures) {
              matchFailed("\"&\"");
            }
          }
          if (result28 !== null) {
            var result29 = parse_conjunction();
            if (result29 !== null) {
              var result26 = [result27, result28, result29];
            } else {
              var result26 = null;
              pos = savedPos3;
            }
          } else {
            var result26 = null;
            pos = savedPos3;
          }
        } else {
          var result26 = null;
          pos = savedPos3;
        }
        var result25 = result26 !== null
          ? (function(f1, f2) {return fml_con(f1,f2)})(result26[0], result26[2])
          : null;
        if (result25 !== null) {
          var result0 = result25;
        } else {
          var savedPos2 = pos;
          var result20 = parse_negation();
          if (result20 !== null) {
            if (input.substr(pos, 1) === "&") {
              var result21 = "&";
              pos += 1;
            } else {
              var result21 = null;
              if (reportMatchFailures) {
                matchFailed("\"&\"");
              }
            }
            if (result21 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result22 = "(";
                pos += 1;
              } else {
                var result22 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result22 !== null) {
                var result23 = parse_start();
                if (result23 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result24 = ")";
                    pos += 1;
                  } else {
                    var result24 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result24 !== null) {
                    var result19 = [result20, result21, result22, result23, result24];
                  } else {
                    var result19 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result19 = null;
                  pos = savedPos2;
                }
              } else {
                var result19 = null;
                pos = savedPos2;
              }
            } else {
              var result19 = null;
              pos = savedPos2;
            }
          } else {
            var result19 = null;
            pos = savedPos2;
          }
          var result18 = result19 !== null
            ? (function(f1, f2) {return fml_con(f1,f2)})(result19[0], result19[3])
            : null;
          if (result18 !== null) {
            var result0 = result18;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "(") {
              var result13 = "(";
              pos += 1;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result13 !== null) {
              var result14 = parse_start();
              if (result14 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result15 = ")";
                  pos += 1;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result15 !== null) {
                  if (input.substr(pos, 1) === "&") {
                    var result16 = "&";
                    pos += 1;
                  } else {
                    var result16 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"&\"");
                    }
                  }
                  if (result16 !== null) {
                    var result17 = parse_conjunction();
                    if (result17 !== null) {
                      var result12 = [result13, result14, result15, result16, result17];
                    } else {
                      var result12 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result12 = null;
                  pos = savedPos1;
                }
              } else {
                var result12 = null;
                pos = savedPos1;
              }
            } else {
              var result12 = null;
              pos = savedPos1;
            }
            var result11 = result12 !== null
              ? (function(f1, f2) {return fml_con(f1,f2)})(result12[1], result12[4])
              : null;
            if (result11 !== null) {
              var result0 = result11;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 1) === "(") {
                var result4 = "(";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result4 !== null) {
                var result5 = parse_start();
                if (result5 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result6 = ")";
                    pos += 1;
                  } else {
                    var result6 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result6 !== null) {
                    if (input.substr(pos, 1) === "&") {
                      var result7 = "&";
                      pos += 1;
                    } else {
                      var result7 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"&\"");
                      }
                    }
                    if (result7 !== null) {
                      if (input.substr(pos, 1) === "(") {
                        var result8 = "(";
                        pos += 1;
                      } else {
                        var result8 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (result8 !== null) {
                        var result9 = parse_start();
                        if (result9 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result10 = ")";
                            pos += 1;
                          } else {
                            var result10 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result10 !== null) {
                            var result3 = [result4, result5, result6, result7, result8, result9, result10];
                          } else {
                            var result3 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result3 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result3 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result3 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result3 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
              var result2 = result3 !== null
                ? (function(f1, f2) {return fml_con(f1,f2)})(result3[1], result3[5])
                : null;
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_negation();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_negation() {
        var cacheKey = 'negation@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        if (input.substr(pos, 1) === "-") {
          var result14 = "-";
          pos += 1;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        if (result14 !== null) {
          var result15 = parse_negation();
          if (result15 !== null) {
            var result13 = [result14, result15];
          } else {
            var result13 = null;
            pos = savedPos2;
          }
        } else {
          var result13 = null;
          pos = savedPos2;
        }
        var result12 = result13 !== null
          ? (function(f1) {return fml_neg(f1)})(result13[1])
          : null;
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "-") {
            var result10 = "-";
            pos += 1;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result10 !== null) {
            var result11 = parse_atom();
            if (result11 !== null) {
              var result9 = [result10, result11];
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          } else {
            var result9 = null;
            pos = savedPos1;
          }
          var result8 = result9 !== null
            ? (function(f1) {return fml_neg(f1)})(result9[1])
            : null;
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 1) === "-") {
              var result4 = "-";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result5 = "(";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result5 !== null) {
                var result6 = parse_start();
                if (result6 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result7 = ")";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result7 !== null) {
                    var result3 = [result4, result5, result6, result7];
                  } else {
                    var result3 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
            var result2 = result3 !== null
              ? (function(f1) {return fml_neg(f1)})(result3[2])
              : null;
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_atom();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_atom() {
        var cacheKey = 'atom@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[a-uw-z0-9]/) !== null) {
          var result9 = input.charAt(pos);
          pos++;
        } else {
          var result9 = null;
          if (reportMatchFailures) {
            matchFailed("[a-uw-z0-9]");
          }
        }
        if (result9 !== null) {
          var result8 = [];
          while (result9 !== null) {
            result8.push(result9);
            if (input.substr(pos).match(/^[a-uw-z0-9]/) !== null) {
              var result9 = input.charAt(pos);
              pos++;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("[a-uw-z0-9]");
              }
            }
          }
        } else {
          var result8 = null;
        }
        var result7 = result8 !== null
          ? (function(at) {return fml_at(at.join(""))})(result8)
          : null;
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "(") {
            var result3 = "(";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result3 !== null) {
            var result6 = parse_atom();
            if (result6 !== null) {
              var result4 = [];
              while (result6 !== null) {
                result4.push(result6);
                var result6 = parse_atom();
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result5 = ")";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(at) {return at})(result2[1])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
